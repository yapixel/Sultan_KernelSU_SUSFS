name: Build and Release Sultan Kernels

permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions
  
on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: true
        
jobs:
  generate-tag:
    runs-on: ubuntu-latest
    if: ${{ inputs.make_release }}
    outputs:
      new_tag: ${{ steps.generate-tag.outputs.new_tag }}
    env:
      REPO_OWNER: yapixel
      REPO_NAME: Sultan_KernelSU_SUSFS
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate and Create New Tag
        id: generate-tag
        run: |
          # Fetch the latest tag from this repository
          LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name')
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v1.5.12-r0"  # Default to v1.5.12-r0 if no tag exists
          fi
          
          # Increment the suffix (e.g., v1.5.12-r0 becomes v1.5.12-r1)
          NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')
          
          # Output the new tag to be used
          echo "New tag: $NEW_TAG"
          
          # Set the new tag as output
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          
          # Create the tag in the repository
          git tag $NEW_TAG
          git push origin $NEW_TAG

  build-kernel-zuma-ksun:
    uses: ./.github/workflows/sultan_ksun.yml
    secrets: inherit
    needs: generate-tag
    with:
      codename: "zuma"
      repo: "android_kernel_google_zuma"
      android_version: "android14"
      kernel_version: "6.1"
      release_tag: ${{ needs.generate-tag.outputs.new_tag }}

  build-kernel-zuma-rksu:
    uses: ./.github/workflows/sultan_rksu.yml
    secrets: inherit
    needs: generate-tag
    with:
      codename: "zuma"
      repo: "android_kernel_google_zuma"
      android_version: "android14"
      kernel_version: "6.1"
      release_tag: ${{ needs.generate-tag.outputs.new_tag }}


  build-kernel-zuma-mksu:
    uses: ./.github/workflows/sultan_mksu.yml
    secrets: inherit
    needs: generate-tag
    with:
      codename: "zuma"
      repo: "android_kernel_google_zuma"
      android_version: "android14"
      kernel_version: "6.1"
      release_tag: ${{ needs.generate-tag.outputs.new_tag }}


  trigger-release:
    runs-on: ubuntu-latest
    needs:
      - generate-tag
      - build-kernel-zuma-ksun
      - build-kernel-zuma-mksu
      - build-kernel-zuma-rksu
      
    
      
    if: ${{ inputs.make_release }}
    env:
      GH_TOKEN: ${{ github.token }}
      RELEASE_NAME: "*TEST BUILD* Sultan Kernels With KernelSU/MKSU & SUSFS v1.5.12 *TEST BUILD*"
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set Build Date
      - name: Set Build Date
        id: set-build-date
        run: |
          BUILD_DATE=$(date '+%Y-%m-%d %H:%M:%S UTC')
          echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT

      # Define Release Notes with Dynamic Date
      - name: Define Release Notes
        id: define-release-notes
        run: |
          RELEASE_NOTES=$(cat << 'EOF'
          This release contains KernelSU and MKSU variants with SUSFS v1.5.12
          
          ⚠️ **COMPATIBILITY NOTICE** ⚠️
          Please ensure compatibility by comparing release dates with official Sultan kernel releases:
          - Check official Sultan releases: https://github.com/kerneltoast/android_kernel_google_gs201/releases
          - This build is based on the latest Sultan kernel commits as of build date
          - Always verify your device's Android version matches the kernel target (Android 14)
          - Recommended to use kernels released within 30 days of official Sultan updates
          
          Module: 
          -> https://github.com/sidex15/ksu_module_susfs
          
          Managers:
          -> https://github.com/backslashxx/KernelSU
          
          Features:
          [+] KernelSU Magic Managers v1.0.5
          [+] SUSFS v1.5.12
          [+] Maphide LineageOS Detections
          [+] Futile Maphide for jit-zygote-cache Detections
          [+] Magic Mount Support
          
          📅 **Release Date Compatibility Check:**
          - Built on: ${{ steps.set-build-date.outputs.build_date }}
          EOF
          )
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Download Artifacts
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      # Create GitHub Release and upload files if make_release is true
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.generate-tag.outputs.new_tag }}  # Use the generated tag for the release
          prerelease: true  # Mark the release as a pre-release
          release_name: ${{ env.RELEASE_NAME }}  # Pass the RELEASE_NAME to the action
          body: ${{ steps.define-release-notes.outputs.release_notes }}  # Use the dynamically generated release notes
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # Upload Release Assets Dynamically
      - name: Upload Release Assets Dynamically
        run: |
          # Loop through all files in the downloaded-artifacts directory
          for file in ./downloaded-artifacts/kernel-*/*; do
              # Skip directories
              if [ -d "$file" ]; then
                  continue
              fi
              # Upload the file to the GitHub release
              echo "Uploading $file..."
              gh release upload ${{ needs.generate-tag.outputs.new_tag }} "$file"
          done
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # Display Files Uploaded
      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          ls ./downloaded-artifacts/**/*
